#include <iostream>

class Array {


public:
    Array(): size(0), data(nullptr) {}

    Array(int size);

    Array(const Array& other)
    { 
        copyFrom(other); 
    }

    ~Array() { 
        std::cout << "Array destructor size is " << size << '\n';
        delete [] data; 
    }

    int& operator[] (int index) const
    {
        return data[index];
    }

    Array& operator= (const Array& other)
    {
        if (&other != this) {
            delete [] data;
            copyFrom(other);
        }

        return *this;
    }

    bool operator==(const Array& other);

    bool operator!=(const Array& other) {
        return !operator==(other);
    }

    int getSize() const {
        return size;
    }

private:
    void copyFrom(const Array& other);

private:
    int size;
    int *data;
};

std::ostream& operator<<(std::ostream& out, const Array& arr);

---------------------------------------

#include "Array.h"

Array::Array(int sz): size (sz)
{
    data = new int[size];
    for (int i = 0; i < size; i++) {
        data[i] = 0;
    }
}

void Array::copyFrom(const Array& other)
{
    size = other.size;
    data = new int[size];
    for (int i = 0; i < size; i++) {
        data[i] = other.data[i];
    }  
}

bool Array::operator==(const Array& other)
{
    if (size != other.size)
        return false;

    for (int i = 0; i < size; i++) {
        if (data[i] != other.data[i])
            return false;
    }

    return true;
}

std::ostream& operator<<(std::ostream& out, const Array& arr)
{
    bool first = true;

    out << "{";
    for (int i = 0; i < arr.getSize(); i++) {
        if (first)
            first = false;
        else {
            out << ", ";
        }
        out << arr[i];
    }
    out << "}";

    return out;
}

#include <iostream>
#include "Array.h"

int main()
{
    Array arr(16);
    Array arr1(arr);
    Array& arrRef = arr;

    std::cout << "Sizeof(Array) is " << sizeof(Array) << '\n'
              << "Sizeof(int) is " << sizeof(int) << '\n'
              << "Sizeof(int *) is " << sizeof(int*) << '\n'
              << "Sizeof(Array&) is " << sizeof(Array&) << '\n';

    for (int i = 0; i < arr.getSize(); i++) {
        arr[i] = i*10;
    }

    arrRef[0] = 1230;

    for (int i = 0; i < arr1.getSize(); i++) {
        arr1[i] = (i+1)*100;
    }

    std::cout << arr << '\n'
              << arr1 << '\n';

    Array arr2(32);
    Array arr3(32);

    arr3 = arr2 = arr1;

    arr1 = arr1;

    std::cout << arr2 << '\n'
              << arr1 << '\n'
              << "arr3 == arr1 is " << (arr3 == arr1) << '\n'
              << "arr1 != arr is " << (arr1 != arr) << '\n';
}


